-- サンプルコラムの追加
INSERT INTO columns (
  title,
  slug,
  excerpt,
  content,
  thumbnail,
  author,
  published_date,
  is_published,
  tags,
  view_count
) VALUES (
  'Webアプリケーション開発における最新のベストプラクティス',
  'web-app-best-practices-2024-heading-demo',
  '2024年のWebアプリケーション開発において押さえておくべき最新のベストプラクティスを、実践的な例と共に詳しく解説します。',
  '# [H1見出し] セクション1: モダンなWebアプリケーション開発の概要

これは通常の本文テキストです（16px）。Webアプリケーション開発は日々進化しており、新しいフレームワークやツールが次々と登場しています。本記事では、2024年における最新のベストプラクティスを紹介します。

## [H2見出し] フロントエンド開発の進化

これは通常の本文テキストです（16px）。近年のフロントエンド開発では、**React**、**Vue.js**、**Angular**などのフレームワークが主流となっています。これらのフレームワークを使用することで、効率的な開発が可能になります。

### [H3見出し] コンポーネント設計の重要性

これは通常の本文テキストです（16px）。コンポーネント設計は、保守性の高いアプリケーションを構築する上で非常に重要です。以下のポイントを押さえておきましょう：

- 単一責任の原則を守る
- 再利用可能なコンポーネントを作成する
- プロップスの型定義を明確にする

#### [H4見出し] TypeScriptの活用

これは通常の本文テキストです（16px）。TypeScriptを使用することで、型安全性を確保できます。以下は簡単な例です：

```typescript
interface UserProps {
  name: string;
  age: number;
  email: string;
}

const UserCard: React.FC<UserProps> = ({ name, age, email }) => {
  return (
    <div>
      <h4>{name}</h4>
      <p>Age: {age}</p>
      <p>Email: {email}</p>
    </div>
  );
};
```

##### [H5見出し] パフォーマンス最適化のテクニック

これは通常の本文テキストです（16px）。パフォーマンスは、ユーザー体験に直結する重要な要素です。以下の最適化テクニックを活用しましょう：

1. **コード分割（Code Splitting）**
   - 動的インポートを使用して、必要なコードのみをロード
   - `React.lazy()` と `Suspense` の活用

2. **メモ化（Memoization）**
   - `useMemo` や `useCallback` を適切に使用
   - 不要な再レンダリングを防ぐ

3. **画像の最適化**
   - WebP形式の使用
   - 遅延読み込みの実装

###### [H6見出し] セキュリティ対策の基本

これは通常の本文テキストです（16px）。Webアプリケーションのセキュリティは、開発者の責任です。以下の基本的な対策を必ず実施しましょう：

- XSS対策：ユーザー入力の適切なエスケープ
- CSRF対策：トークンベースの認証
- SQLインジェクション対策：プリペアドステートメントの使用

> これは引用文です。セキュリティは後から追加するものではなく、設計段階から考慮すべき要素です。

# [H1見出し] セクション2: バックエンド開発のベストプラクティス

これは通常の本文テキストです（16px）。バックエンド開発においても、多くの進化が見られます。マイクロサービスアーキテクチャやサーバーレスコンピューティングなど、新しいパラダイムが登場しています。

## [H2見出し] APIデザインの原則

これは通常の本文テキストです（16px）。優れたAPIは、直感的で使いやすく、拡張性があります。RESTful APIの設計原則に加えて、GraphQLなどの新しいアプローチも検討しましょう。

### [H3見出し] RESTful APIの設計

これは通常の本文テキストです（16px）。RESTful APIを設計する際は、以下の原則を守りましょう：

- 適切なHTTPメソッドの使用（GET、POST、PUT、DELETE）
- ステートレスな設計
- 一貫性のあるURLパターン

## [H2見出し] データベース設計のポイント

これは通常の本文テキストです（16px）。データベース設計は、アプリケーションのパフォーマンスと拡張性に大きく影響します。

- 正規化と非正規化のバランス
- インデックスの適切な設定
- トランザクションの管理

# [H1見出し] まとめ

これは通常の本文テキストです（16px）。Webアプリケーション開発は常に進化しています。最新のベストプラクティスを学び、実践することで、より良いアプリケーションを構築できます。

**重要なポイント**：
- 継続的な学習が必要
- セキュリティを最優先に
- パフォーマンスとユーザー体験のバランス

これらの原則を守りながら、革新的なWebアプリケーションを開発していきましょう。',
  'https://images.unsplash.com/photo-1517180102446-f3ece451e9d8?w=800&q=80',
  '山田太郎',
  '2024-08-12',
  true,
  ARRAY['Web開発', 'ベストプラクティス', 'TypeScript', 'React'],
  42
);